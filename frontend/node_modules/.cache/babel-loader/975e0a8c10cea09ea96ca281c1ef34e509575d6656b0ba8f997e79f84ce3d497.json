{"ast":null,"code":"var _jsxFileName = \"/Users/lolitakuliuk/Documents/TraineeReactTask/frontend/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport styles from \"./Chat.module.css\";\nimport ChatInput from \"./ChatInput\";\nimport Messages from \"./Messages\";\nimport axios from \"axios\";\nimport { getAllMessagesRoute, setMessageRoute } from '../../utils/APIRoutes';\nimport EditContact from \"./EditContact/EditContact\";\nimport { updateContactRoute } from '../../utils/APIRoutes';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5300\"); // Replace with your server address\n\nfunction Chat({\n  currentChat,\n  currentUser\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  const [formData, setFormData] = useState({\n    id: '',\n    firstname: '',\n    lastname: ''\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      if (currentUser && currentChat) {\n        const response = await axios.post(getAllMessagesRoute, {\n          from: currentUser._id,\n          to: currentChat._id\n        });\n        setMessages(response.data);\n      }\n    };\n    fetchData();\n  }, [currentChat, messages]);\n  const handleSendMsg = async msg => {\n    await axios.post(setMessageRoute, {\n      from: currentUser._id,\n      to: currentChat._id,\n      message: msg\n    });\n  };\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  const updateContact = async data => {\n    setFormData(prevState => ({\n      ...prevState,\n      firstname: data.firstname,\n      lastname: data.lastname\n    }));\n    const response = await axios.put(updateContactRoute, formData);\n    console.log(response);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatContainer,\n    children: currentChat && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.userDetails,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [currentChat.firstname, \" \", currentChat.lastname]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleOpenModal,\n            children: \"Edit chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditContact, {\n            show: showModal,\n            onClose: handleCloseModal,\n            currentChat: currentChat,\n            formData: formData,\n            setFormData: setFormData,\n            updateContact: updateContact\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.chatMessages,\n        children: messages ? messages.map((message, index) => {\n          return /*#__PURE__*/_jsxDEV(Messages, {\n            message: message\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this);\n        }) : dkm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.chatInput,\n        children: /*#__PURE__*/_jsxDEV(ChatInput, {\n          handleSendMsg: handleSendMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this)\n\n  // <div className=\"flex justify-center items-center w-full h-screen bg-gradient-to-b from-blue-300 to-blue-200\">\n  //   <div className=\"bg-white rounded-lg w-96 h-96 p-4 shadow-md\">\n  //     <div className=\"flex flex-col h-full\">\n  //       <div className=\"flex-1 p-2 overflow-y-auto bg-gray-100 rounded-md\">\n  //         {messages.map((msg, index) => (\n  //           <div key={index} className=\"flex flex-col items-start\">\n  //             <div\n  //               className=\"bg-blue-500 \n  //                text-white p-2 rounded-md\"\n  //             >\n  //               {msg.text}\n  //             </div>\n  //             <span className=\"text-gray-500 text-xs\">\n  //               {new Date(msg.timestamp).toLocaleTimeString()}\n  //             </span>\n  //           </div>\n  //         ))}\n  //       </div>\n  //       <div className=\"p-2 border-t border-gray-300\">\n  //         <div className=\"flex\">\n  //           <input\n  //             type=\"text\"\n  //             className=\"w-full px-2 py-1 border rounded-l-md outline-none\"\n  //             placeholder=\"Type your message...\"\n  //             value={messageInput}\n  //             onChange={(e) => setMessageInput(e.target.value)}\n  //           />\n  //           <button\n  //             className=\"px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600\"\n  //             onClick={sendMessage}\n  //           >\n  //             Send\n  //           </button>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   </div>\n  // </div>\n  ;\n}\n\n// useEffect(() => {\n//   // Socket.IO event listeners\n\n//   // Listen for incoming messages\n//   socket.on(\"message\", (message) => {\n//     setMessages([...messages, message]);\n//   });\n\n//   return () => {\n//     // Cleanup on component unmount\n//     socket.off(\"message\");\n//   };\n// }, [messages]);\n\n// const sendMessage = () => {\n// if (messageInput.trim() !== \"\") {\n//   const message = { text: messageInput, timestamp: new Date() };\n//   socket.emit(\"message\", message);\n//   setMessageInput(\"\");\n// }\n// };\n_s(Chat, \"yfXUA87HJK55p9cEmN9rkGBz99I=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useEffect","io","styles","ChatInput","Messages","axios","getAllMessagesRoute","setMessageRoute","EditContact","updateContactRoute","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","Chat","currentChat","currentUser","_s","messages","setMessages","messageInput","setMessageInput","showModal","setShowModal","formData","setFormData","id","firstname","lastname","fetchData","response","post","from","_id","to","data","handleSendMsg","msg","message","handleOpenModal","handleCloseModal","updateContact","prevState","put","console","log","className","chatContainer","children","userDetails","fileName","_jsxFileName","lineNumber","columnNumber","onClick","show","onClose","chatMessages","map","index","dkm","chatInput","_c","$RefreshReg$"],"sources":["/Users/lolitakuliuk/Documents/TraineeReactTask/frontend/src/components/Chat/Chat.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport styles from \"./Chat.module.css\";\nimport ChatInput from \"./ChatInput\";\nimport Messages from \"./Messages\";\nimport axios from \"axios\";\nimport { getAllMessagesRoute, setMessageRoute } from '../../utils/APIRoutes'\nimport EditContact from \"./EditContact/EditContact\";\nimport { updateContactRoute } from '../../utils/APIRoutes';\n\nconst socket = io(\"http://localhost:5300\"); // Replace with your server address\n\nfunction Chat({ currentChat, currentUser }) {\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  const [formData, setFormData] = useState({\n    id: '',\n    firstname: '',\n    lastname: ''\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (currentUser && currentChat) {\n        const response = await axios.post(getAllMessagesRoute, {\n          from: currentUser._id,\n          to: currentChat._id\n        });\n        setMessages(response.data);\n      }\n    }\n    fetchData();\n  }, [currentChat, messages])\n\n  const handleSendMsg = async (msg) => {\n    await axios.post(setMessageRoute, {\n      from: currentUser._id,\n      to: currentChat._id,\n      message: msg\n    })\n  }\n\n  const handleOpenModal = () => {\n    setShowModal(true);\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const updateContact = async (data) => {\n    setFormData(prevState => ({\n      ...prevState,\n      firstname: data.firstname,\n      lastname: data.lastname\n    }));\n    const response = await axios.put(updateContactRoute, formData);\n    console.log(response);\n  }\n\n\n\n  return (\n    <div className={styles.chatContainer}>\n      {currentChat && (<>\n        <div>\n          <div className={styles.userDetails} >\n            <h3>{currentChat.firstname} {currentChat.lastname}</h3>\n            <button onClick={handleOpenModal} >Edit chat</button>\n            <EditContact show={showModal} onClose={handleCloseModal} currentChat={currentChat}\n              formData={formData} setFormData={setFormData} updateContact={updateContact} />\n          </div>\n        </div>\n        <div className={styles.chatMessages}>\n          {\n            messages \n            ? messages.map((message, index) => {\n              return (\n                <Messages message={message} key={index} />\n              )\n            })\n            : dkm\n          }\n\n        </div>\n        <div className={styles.chatInput}>\n          <ChatInput handleSendMsg={handleSendMsg} />\n        </div>\n      </>)}\n    </div>\n\n\n\n    // <div className=\"flex justify-center items-center w-full h-screen bg-gradient-to-b from-blue-300 to-blue-200\">\n    //   <div className=\"bg-white rounded-lg w-96 h-96 p-4 shadow-md\">\n    //     <div className=\"flex flex-col h-full\">\n    //       <div className=\"flex-1 p-2 overflow-y-auto bg-gray-100 rounded-md\">\n    //         {messages.map((msg, index) => (\n    //           <div key={index} className=\"flex flex-col items-start\">\n    //             <div\n    //               className=\"bg-blue-500 \n    //                text-white p-2 rounded-md\"\n    //             >\n    //               {msg.text}\n    //             </div>\n    //             <span className=\"text-gray-500 text-xs\">\n    //               {new Date(msg.timestamp).toLocaleTimeString()}\n    //             </span>\n    //           </div>\n    //         ))}\n    //       </div>\n    //       <div className=\"p-2 border-t border-gray-300\">\n    //         <div className=\"flex\">\n    //           <input\n    //             type=\"text\"\n    //             className=\"w-full px-2 py-1 border rounded-l-md outline-none\"\n    //             placeholder=\"Type your message...\"\n    //             value={messageInput}\n    //             onChange={(e) => setMessageInput(e.target.value)}\n    //           />\n    //           <button\n    //             className=\"px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600\"\n    //             onClick={sendMessage}\n    //           >\n    //             Send\n    //           </button>\n    //         </div>\n    //       </div>\n    //     </div>\n    //   </div>\n    // </div>\n\n  );\n}\n\n// useEffect(() => {\n//   // Socket.IO event listeners\n\n//   // Listen for incoming messages\n//   socket.on(\"message\", (message) => {\n//     setMessages([...messages, message]);\n//   });\n\n//   return () => {\n//     // Cleanup on component unmount\n//     socket.off(\"message\");\n//   };\n// }, [messages]);\n\n// const sendMessage = () => {\n// if (messageInput.trim() !== \"\") {\n//   const message = { text: messageInput, timestamp: new Date() };\n//   socket.emit(\"message\", message);\n//   setMessageInput(\"\");\n// }\n// };\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}